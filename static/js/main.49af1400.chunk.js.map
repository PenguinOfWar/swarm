{"version":3,"sources":["packages/boudica/boudica.ts","containers/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Boudica","birth","Date","now","interval","beat","rate","working","halted","this","start","milliseconds","Promise","resolve","setTimeout","resume","setInterval","a","heartbeat","App","useState","running","setRunning","useEffect","boudica","window","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAMqBA,E,WAcnB,aAAe,yBAbfC,MAAQC,KAAKC,MAaC,KAZdC,SAAW,IAYG,KAVPC,KAAO,EAUA,KATPC,KAAO,EASA,KARPC,SAAU,EAQH,KAFdC,QAAS,EAGPC,KAAKC,Q,2CASP,SAAQC,GACN,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,Q,mBAGpD,WAAS,IAAD,OACNF,KAAKM,SAOLC,YAAW,sBAAC,sBAAAC,EAAA,0DACN,EAAKV,UAAW,EAAKC,OADf,wDAKV,EAAKD,SAAU,EALL,SAMJ,EAAKW,YAND,OAOV,EAAKX,SAAU,EAPL,2CAQTE,KAAKL,SAAWK,KAAKH,Q,oBAM1B,WACEG,KAAKD,QAAS,I,kBAGhB,WACEC,KAAKD,QAAS,I,8DAMhB,8EACEC,KAAKJ,OADP,gD,4EChCac,MA1Bf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAcb,OAXAC,qBAAU,WACR,IAAIF,EAAJ,CAIA,IAAMG,EAAU,IAAIxB,EAEpByB,OAAOD,QAAUA,EACjBF,GAAW,MACV,CAACD,IAGF,qBAAKK,UAAU,gBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,SAAf,UACE,mDACA,8CCdKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49af1400.chunk.js","sourcesContent":["/**\n *\n * @swarm.ai/boudica - An AI opposition generator in TypeScript\n * @author Darryl Walker\n */\n\nexport default class Boudica {\n  birth = Date.now();\n  interval = 1000;\n\n  public beat = 0;\n  public rate = 1;\n  public working = false;\n\n  /**\n   * set whether Boudica should stop\n   * we start halted\n   */\n  halted = true;\n\n  constructor() {\n    this.start();\n  }\n\n  /**\n   * Replaces the usual setTimeout function with an awaitable one\n   *\n   * @param milliseconds - number of milliseconds to wait\n   * @returns Promise\n   */\n  timeout(milliseconds: number) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n  }\n\n  start() {\n    this.resume();\n\n    /**\n     * convert this to a self calling function\n     * get variable timing on fly and better memory management\n     */\n\n    setInterval(async () => {\n      if (this.working || this.halted) {\n        return;\n      }\n\n      this.working = true;\n      await this.heartbeat();\n      this.working = false;\n    }, this.interval / this.rate);\n  }\n\n  /**\n   * halt and resume methods\n   */\n  public resume() {\n    this.halted = false;\n  }\n\n  public halt() {\n    this.halted = true;\n  }\n\n  /**\n   * where the magic happens\n   */\n  public async heartbeat() {\n    this.beat++;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport Boudica from '../../packages/boudica';\n\n/**\n * summon boudica\n */\n\nimport './App.scss';\n\nfunction App() {\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    if (running) {\n      return;\n    }\n\n    const boudica = new Boudica();\n\n    window.boudica = boudica;\n    setRunning(true);\n  }, [running]);\n\n  return (\n    <div className=\"app container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h1>@swarm.ai/boudica</h1>\n          <h2>WIP!</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/App/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport './sass/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}